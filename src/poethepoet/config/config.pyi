from collections.abc import Iterator, Mapping, Sequence
from pathlib import Path
from typing import Any

from poethepoet.config.file import PoeConfigFile as PoeConfigFile
from poethepoet.config.partition import ConfigPartition as ConfigPartition
from poethepoet.config.partition import IncludedConfig as IncludedConfig
from poethepoet.config.partition import ProjectConfig as ProjectConfig
from poethepoet.exceptions import ConfigValidationError as ConfigValidationError
from poethepoet.exceptions import PoeException as PoeException

POE_DEBUG: bool

class PoeConfig:
    def __init__(
        self,
        cwd: Path | str | None = None,
        table: Mapping[str, Any] | None = None,
        config_name: str | Sequence[str] | None = None,
    ) -> None: ...
    def lookup_task(self, name: str) -> tuple[Mapping[str, Any], ConfigPartition] | tuple[None, None]: ...
    def partitions(self, included_first: bool = True) -> Iterator[ConfigPartition]: ...
    @property
    def executor(self) -> Mapping[str, Any]: ...
    @property
    def task_names(self) -> Iterator[str]: ...
    @property
    def tasks(self) -> dict[str, Any]: ...
    @property
    def default_task_type(self) -> str: ...
    @property
    def default_array_task_type(self) -> str: ...
    @property
    def default_array_item_task_type(self) -> str: ...
    @property
    def shell_interpreter(self) -> tuple[str, ...]: ...
    @property
    def verbosity(self) -> int: ...
    @property
    def is_poetry_project(self) -> bool: ...
    @property
    def project_dir(self) -> Path: ...
    def load(self, target_path: Path | str | None = None, strict: bool = True) -> None: ...
