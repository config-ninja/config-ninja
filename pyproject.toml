[build-system]
# https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
# https://python-poetry.org/docs/pyproject/
name = "config-ninja"
version = "0.0.0"
description = "Use special ninja powers to manage system configurations ðŸ¥·"
authors = ["Bryant Finney <bryant.finney@outlook.com>"]
documentation = "https://config-ninja.readthedocs.org/home.html"
exclude = ["**/conftest.py"]
homepage = "https://bryant-finney.github.io/config-ninja/config_ninja.html"
license = "MIT"
readme = "README.md"
repository = "https://github.com/bryant-finney/config-ninja"
classifiers = [
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Typing :: Typed",
]

[tool.poetry.scripts]
config-ninja = "config_ninja.cli:app"

[tool.poetry-dynamic-versioning]
enable = true
# in plain english:
#   1. is the current commit tagged?
#      - if yes, convert the tag to PEP-440 format
#   2. is the most recent tag for a pre-release (ends with '-(a|b|rc)N', where N is a number)?
#      - if yes, increment the pre-release number N by the number of commits since the last tag
#   3. otherwise (i.e. the current commit is not tagged, and the latest tag is not a
#      pre-release)...
#      - add a .postN suffix, where N is the number of commits since the tag
#
# in all cases, append '.dirty' to the version metadata if there are uncommitted changes to the repo
format-jinja = """
  {%- if distance == 0 -%}
    {{ serialize_pep440(base, stage, revision, metadata=["dirty"] if dirty else []) }}
  {%- elif revision is not none -%}
    {{ serialize_pep440(base, stage, revision + distance, metadata=[commit] + (["dirty"] if dirty else [])) }}
  {%- else -%}
    {{ serialize_pep440(base, stage, revision, post=distance, metadata=[commit] + (["dirty"] if dirty else [])) }}
  {%- endif -%}
"""
strict = true
style = "pep440"
vcs = "git"

[tool.poetry-dynamic-versioning.substitution]
files = ["*.py", "**/__init__.py", "*/__version__.py", "*/_version.py"]

[tool.semantic_release]
build_command = "poetry build"
commit_message = "chore(release): {version}\n\nAutomatically generated by python-semantic-release"
version_toml = []       # <â”€â”€â”€â”¬â”€â”€ these locations are updated by `poetry-dynamic-versioning`
version_variables = []  # <â”€â”€â”€â”˜

[tool.semantic_release.branches.main]
match = "main"
prerelease_token = "beta"

[tool.semantic_release.branches.topic]
match = "^(feat(ure)?|bug(fix)?|(hot)?fix|chore|devops|ci|deps|docs|test|refactor|perf|style)/([0-9]+/)?[a-z0-9\\-]*$"
prerelease = true
prerelease_token = "alpha"

[tool.semantic_release.changelog]
template_dir = "changelog"

[tool.semantic_release.commit_author]
env = "GITHUB_USER"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
  "build",
  "chore",
  "ci",
  "docs",
  "feat",
  "fix",
  "perf",
  "style",
  "refactor",
  "test",
  "dependencies",
  "deps",
  "devops",
]

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.remote.token]
env = "GITHUB_TOKEN"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.poetry.dependencies]
# https://python-poetry.org/docs/dependency-specification/
python = "^3.8.1"
pyyaml = "^6.0"
typing-extensions = { version = "^4.7.1", python = "3.8" }
typer = {extras = ["all"], version = "^0.9.0"}
boto3 = { version = "^1.34.11", optional = true }
pyspry = "^1.0.2"
watchfiles = { version = "^0.21.0", optional = true }
jinja2 = "^3.1.2"
tomlkit = "^0.12.3"
# sdnotify is designed to handle errors when systemd is missing
sdnotify = "^0.3.2"

# sh encounters import errors on Windows
sh =  { version = "^2.0.6",  markers = "sys_platform != 'win32'" }

[tool.poetry.extras]
# https://python-poetry.org/docs/pyproject/#extras
all = ["boto3", "watchfiles"]
appconfig = ["boto3"]
local = ["watchfiles"]


[tool.poetry.group.dev.dependencies]
boto3-stubs = {version = "1.34.92", extras = ["appconfig", "appconfigdata"]}
poethepoet = ">=0.20,<0.26"
types-pyyaml = "^6"

[tool.poetry.group.lint.dependencies]
anybadge = "^1.14"
pylint = "^3.0"
safety = ">=2.3,<4.0"
shellcheck-py = {version = ">=0.8,<0.11", markers = "platform_machine != 'arm64'"}
pre-commit = [
  {version = "<3.6", python = "<3.9"},
  {version = ">=3.6", python = ">=3.9"}
]

[tool.poetry.group.misc.dependencies]
certifi = ">=2023.07.22"
cruft = "^2.11"
gitpython = ">=3.1.32"             # https://nvd.nist.gov/vuln/detail/CVE-2023-40267
jupyterlab = ">=3.4,<5.0"
pdoc = "^14"
pytest-testmon = "^2.0.12"
pytest-watch = "^4.2.0"
python-dotenv = "^1.0.0"
python-semantic-release = ">=8.0.8,<10.0.0"

[tool.poetry.group.test.dependencies]
# dependencies for testing
coverage = { extras = ["toml"], version = ">=6.4,<8.0" }
pytest = ">=7.4.4,<9.0.0"
pytest-clarity = "^1.0.1"
pytest-cov = ">=3,<6"
pytest-mock = "^3.8"

[tool.poetry.group.pre-commit.dependencies]
# note: these must be synchronized with `.pre-commit-config.yaml`
ruff = ">=0.1.9,<0.5.0"
mypy = { extras = ["reports"], version = "^1.4.1" }
lxml = {version = ">=4.9.3", python = ">=3.12"}
pyright = "^1.1.344"

[tool.coverage.report]
# https://coverage.readthedocs.io/en/latest/config.html#report
fail_under = 50
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]
# https://coverage.readthedocs.io/en/latest/config.html#run
command_line = "--module pytest"
data_file = ".coverage"
source = ["src", "tools"]

[tool.coverage.html]
show_contexts = true

[tool.coverage.xml]
# https://coverage.readthedocs.io/en/latest/config.html#xml
output = "docs/reports/coverage.xml"

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html
junit_xml = "docs/reports/mypy.xml"
html_report = "docs/reports/mypy-html"
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true

[tool.poe]
poetry_command = ""

[tool.poe.env]
FAVICON_URL.default = "https://bryant-finney.github.io/config-ninja/favicon-32x32.png"
LOGO_URL.default = "https://bryant-finney.github.io/config-ninja/config-ninja.png"

[tool.poe.tasks]
_version.cmd = "poetry version --short"
build-pkg.cmd = "poetry build"

[tool.poe.tasks.check-for-prerelease]
capture_stdout = "check-for-prerelease.out"
help = "Evaluate whether a new prerelease can be created"
shell = """
  semantic-release version --print --prerelease 2>&1 | grep -q "No release will be made" ||
    echo true
"""

[tool.poe.tasks.setup-versioning]
help = "Install the 'poetry-dynamic-versioning' plugin to the local 'poetry' installation"
cmd = "poetry self add 'poetry-dynamic-versioning[plugin]'"

# https://github.com/nat-n/poethepoet
[tool.poe.tasks.docs]
help = "Generate this package's docs"
uses = {PACKAGE_VERSION = "_version"}

[[tool.poe.tasks.docs.sequence]]
cmd = """
  pdoc
    --mermaid
    --docformat google
    --output-directory docs
    --logo "$LOGO_URL"
    --favicon "$FAVICON_URL"
    --footer "$PACKAGE_VERSION"
    abc
    boto3.session
    config_ninja
    config_ninja.backend
    config_ninja.cli
    config_ninja.contrib
    config_ninja.systemd
    dataclasses
    jinja2
    mypy_boto3_appconfig
    mypy_boto3_appconfig.client
    mypy_boto3_appconfigdata
    mypy_boto3_appconfigdata.client
    pathlib
    pyspry
    pyspry.base
    pytest
    pytest_mock
    pytest_mock.plugin
    tests
    tools
    tools.install
    typer.models
    typer.params
    typing
    unittest
"""

[[tool.poe.tasks.docs.sequence]]
cmd = "cp tools/install.py docs/install.py"

[tool.poe.tasks.serve-docs]
help = "Use 'pdoc' to launch an HTTP server for this package's docs"
cmd = """
  pdoc
    --mermaid
    --docformat google
    --logo "$LOGO_URL"
    --favicon "$FAVICON_URL"
    --footer "Version: $PACKAGE_VERSION"
    abc
    boto3.session
    config_ninja
    config_ninja.backend
    config_ninja.cli
    config_ninja.contrib
    config_ninja.systemd
    dataclasses
    jinja2
    mypy_boto3_appconfig
    mypy_boto3_appconfig.client
    mypy_boto3_appconfigdata
    mypy_boto3_appconfigdata.client
    pathlib
    pyspry
    pyspry.base
    pytest
    pytest_mock
    pytest_mock.plugin
    tests
    tools
    tools.install
    typer.models
    typer.params
    typing
    unittest
"""
uses = {PACKAGE_VERSION = "_version"}

[tool.poe.tasks.lab]
help = "Run Jupyter Lab"

[[tool.poe.tasks.lab.sequence]]
cmd = "mkdir -p notebooks"

[[tool.poe.tasks.lab.sequence]]
cmd = """
  jupyter lab
    --allow-root
    --notebook-dir notebooks
"""

[tool.poe.tasks.lint]
help = "Lint this package"

[[tool.poe.tasks.lint.sequence]]
cmd = """
  pre-commit run
    --all-files
    --color always
"""

[[tool.poe.tasks.lint.sequence]]
cmd = """pylint src"""

[[tool.poe.tasks.lint.sequence]]
shell = """
  grep -oE 'Your code has been rated at [0-9.]+' docs/reports/pylint-report.txt |
    rev | cut -d' ' -f1 | rev |
    xargs -I{} anybadge --overwrite --label pylint --value {} \
      --file=docs/reports/pylint.svg 7=red 8=orange 9=yellow 10=green
"""

[[tool.poe.tasks.lint.sequence]]
shell = "safety check --continue-on-error --full-report"

[tool.poe.tasks.test]
help = "Test this package and report coverage"
cmd = """
  pytest
    --cov=./src/
    --cov=./tools/
    --cov-branch
    --cov-context=test
    --cov-fail-under=90
    --cov-report=term
    --cov-report=html:./docs/reports/pytest-html
    --cov-report=xml:./docs/reports/coverage.xml
    --doctest-glob=README.md
    --junitxml=docs/reports/pytest.xml
    .
"""

[tool.poe.tasks.test-watch]
help = "Run tests continuously by watching for file changes"
env = { "POETRY_DYNAMIC_VERSIONING_BYPASS" = "0.0.0" }
cmd = "ptw --config ptw.ini"

[tool.poe.tasks.pre-release]
help = "Create a new pre-release and push it to GitHub"
cmd = "semantic-release version --prerelease --no-changelog"

[tool.poe.tasks.test-py]
help = "Use 'poetry' to a virtual environment with the specified Python version"
args = [{name = "py", positional = true}]
shell = """
  poetry env use $py
  poetry install --all-extras --sync --only=dev,main,test
  poetry run poe test
"""

[tool.poe.tasks.test-python-versions]
help = "Run the test suite in separate virtual environments for each supported Python version"
shell = """
  for py in 3.8 3.9 3.10 3.11 3.12; do
    poetry run poe test-py $py
  done
"""

[tool.pylint.main]
# Analyse import fallback blocks. This can be used to support both Python 2 and 3
# compatible code, which means that the block might have code that exists only in
# one or another interpreter, leading to false positives when analysed.
# analyse-fallback-blocks =
# Always return a 0 (non-error) status code, even if lint errors are found. This
# is primarily useful in continuous integration scripts.
# exit-zero =
# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
# extension-pkg-allow-list =
# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code. (This is an alternative name to extension-pkg-allow-list
# for backward compatibility.)
# extension-pkg-whitelist =
# Return non-zero exit code if any of these messages/categories are detected,
# even if score is above --fail-under value. Syntax same as enable. Messages
# specified are enabled, while categories only check already-enabled messages.
# fail-on =
# Specify a score threshold under which the program will exit with error.
fail-under = 9
# Interpret the stdin as a python script, whose filename needs to be passed as
# the module_or_package argument.
# from-stdin =
# Files or directories to be skipped. They should be base names, not paths.
ignore = ["CVS"]
# Add files or directories matching the regular expressions patterns to the
# ignore-list. The regex matches against paths and can be in Posix or Windows
# format. Because '\' represents the directory delimiter on Windows systems, it
# can't be used as an escape character.
# ignore-paths =
# Files or directories matching the regular expression patterns are skipped. The
# regex matches against base names, not paths. The default value ignores Emacs
# file locks
ignore-patterns = ["^\\.#"]
# List of module names for which member attributes should not be checked (useful
# for modules/projects where namespaces are manipulated during runtime and thus
# existing member attributes cannot be deduced by static analysis). It supports
# qualified module names, as well as Unix pattern matching.
# ignored-modules =
# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
# init-hook =
# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use, and will cap the count on Windows to
# avoid hangs.
jobs = 1
# Control the amount of potential inferred values when inferring a single object.
# This can help the performance when dealing with large functions or complex,
# nested conditions.
limit-inference-results = 100
# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins = "pylint.extensions.mccabe"
# Pickle collected data for later comparisons.
persistent = true
# Minimum Python version to use for version dependent checks. Will default to the
# version used to run pylint.
py-version = "3.8"
# Discover python modules and packages in the file system subtree.
# recursive =
# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode = true

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
# unsafe-load-any-extension =
[tool.pylint.basic]
# Naming style matching correct argument names.
argument-naming-style = "snake_case"
# Regular expression matching correct argument names. Overrides argument-naming-
# style. If left empty, argument names will be checked with the set naming style.
# argument-rgx =
# Naming style matching correct attribute names.
attr-naming-style = "snake_case"
# Regular expression matching correct attribute names. Overrides attr-naming-
# style. If left empty, attribute names will be checked with the set naming
# style.
# attr-rgx =
# Bad variable names which should always be refused, separated by a comma.
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
# Bad variable names regexes, separated by a comma. If names match any regex,
# they will always be refused
# bad-names-rgxs =
# Naming style matching correct class attribute names.
class-attribute-naming-style = "any"
# Regular expression matching correct class attribute names. Overrides class-
# attribute-naming-style. If left empty, class attribute names will be checked
# with the set naming style.
# class-attribute-rgx =
# Naming style matching correct class constant names.
class-const-naming-style = "UPPER_CASE"
# Regular expression matching correct class constant names. Overrides class-
# const-naming-style. If left empty, class constant names will be checked with
# the set naming style.
# class-const-rgx =
# Naming style matching correct class names.
class-naming-style = "PascalCase"
# Regular expression matching correct class names. Overrides class-naming-style.
# If left empty, class names will be checked with the set naming style.
# class-rgx =
# Naming style matching correct constant names.
const-naming-style = "UPPER_CASE"
# Regular expression matching correct constant names. Overrides const-naming-
# style. If left empty, constant names will be checked with the set naming style.
# const-rgx =
# Minimum line length for functions/classes that require docstrings, shorter ones
# are exempt.
docstring-min-length = -1
# Naming style matching correct function names.
function-naming-style = "snake_case"
# Regular expression matching correct function names. Overrides function-naming-
# style. If left empty, function names will be checked with the set naming style.
# function-rgx =
# Good variable names which should always be accepted, separated by a comma.
good-names = ["e", "f", "i", "j", "k", "v", "ex", "Run", "_"]
# Good variable names regexes, separated by a comma. If names match any regex,
# they will always be accepted
# good-names-rgxs =
# Include a hint for the correct naming format with invalid-name.
# include-naming-hint =
# Naming style matching correct inline iteration names.
inlinevar-naming-style = "any"
# Regular expression matching correct inline iteration names. Overrides
# inlinevar-naming-style. If left empty, inline iteration names will be checked
# with the set naming style.
# inlinevar-rgx =
# Naming style matching correct method names.
method-naming-style = "snake_case"
# Regular expression matching correct method names. Overrides method-naming-
# style. If left empty, method names will be checked with the set naming style.
# method-rgx =
# Naming style matching correct module names.
module-naming-style = "snake_case"
# Regular expression matching correct module names. Overrides module-naming-
# style. If left empty, module names will be checked with the set naming style.
# module-rgx =
# Colon-delimited sets of names that determine each other's naming style when the
# name regexes allow several styles.
# name-group =
# Regular expression which should only match function or class names that do not
# require a docstring.
no-docstring-rgx = "^_"
# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties. These
# decorators are taken in consideration only for invalid-name.
property-classes = ["abc.abstractproperty"]
# Regular expression matching correct type variable names. If left empty, type
# variable names will be checked with the set naming style.
# typevar-rgx =
# Naming style matching correct variable names.
variable-naming-style = "snake_case"

# Regular expression matching correct variable names. Overrides variable-naming-
# style. If left empty, variable names will be checked with the set naming style.
# variable-rgx =
[tool.pylint.classes]
# Warn about protected attribute access inside special methods
# check-protected-access-in-special-methods =
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
# List of member names, which should be excluded from the protected access
# warning.
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
# List of valid names for the first argument in a class method.
valid-classmethod-first-arg = ["cls"]
# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg = ["cls"]

[tool.pylint.design]
# List of regular expressions of class ancestor names to ignore when counting
# public methods (see R0903)
# exclude-too-few-public-methods =
# List of qualified class names to ignore when counting class parents (see R0901)
# ignored-parents =
# Maximum number of arguments for function / method.
max-args = 5
# Maximum number of attributes for a class (see R0902).
max-attributes = 7
# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr = 5
# Maximum number of branch for function / method body.
max-branches = 12
# Maximum number of locals for function / method body.
max-locals = 15
# Maximum number of parents for a class (see R0901).
max-parents = 7
# Maximum number of public methods for a class (see R0904).
max-public-methods = 20
# Maximum number of return / yield for function / method body.
max-returns = 6
# Maximum number of statements in function / method body.
max-statements = 50
# Minimum number of public methods for a class (see R0903).
min-public-methods = 2
# configure the maximum cyclomatic complexity (mccabe)
max-complexity = 6

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
# expected-line-ending-format =
# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4
# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string = "    "
# Maximum number of characters on a single line.
max-line-length = 100
# Maximum number of lines in a module.
max-module-lines = 1000

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
# single-line-class-stmt =
# Allow the body of an if to be on the same line as the test if there is no else.
# single-line-if-stmt =
[tool.pylint.imports]
# List of modules that can be imported at any level, not just the top level one.
# allow-any-import-level =
# Allow wildcard imports from modules that define __all__.
# allow-wildcard-with-all =
# Deprecated modules which should not be used, separated by a comma.
# deprecated-modules =
# Output a graph (.gv or any supported image format) of external dependencies to
# the given file (report RP0402 must not be disabled).
# ext-import-graph =
# Output a graph (.gv or any supported image format) of all (i.e. internal and
# external) dependencies to the given file (report RP0402 must not be disabled).
# import-graph =
# Output a graph (.gv or any supported image format) of internal dependencies to
# the given file (report RP0402 must not be disabled).
# int-import-graph =
# Force import order to recognize a module as part of the standard compatibility
# libraries.
# known-standard-library =
# Force import order to recognize a module as part of a third party library.
known-third-party = ["enchant"]

# Couples of modules and preferred modules, separated by a comma.
# preferred-modules =
[tool.pylint.logging]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style = "old"
# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules = ["logging"]

[tool.pylint."messages control"]
# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence = [
  "HIGH",
  "CONTROL_FLOW",
  "INFERENCE",
  "INFERENCE_FAILURE",
  "UNDEFINED",
]
# Disable the message, report, category or checker with the given id(s). You can
# either give multiple identifiers separated by comma (,) or put this option
# multiple times (only on the command line, not in the configuration file where
# it should appear only once). You can also use "--disable=all" to disable
# everything first and then re-enable specific checks. For example, if you want
# to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = [
  "raw-checker-failed",
  "bad-inline-option",
  "locally-disabled",
  "file-ignored",
  "suppressed-message",
  "useless-suppression",
  "deprecated-pragma",
  "use-symbolic-message-instead",
  "too-few-public-methods",
  "unused-import",
  "line-too-long"
]
# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where it
# should appear only once). See also the "--disable" option for examples.
enable = ["c-extension-no-member"]

[tool.pylint.method_args]
# List of qualified names (i.e., library.method) which require a timeout
# parameter e.g. 'requests.api.get,requests.api.post'
timeout-methods = [
  "requests.api.delete",
  "requests.api.get",
  "requests.api.head",
  "requests.api.options",
  "requests.api.patch",
  "requests.api.post",
  "requests.api.put",
  "requests.api.request",
]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "XXX", "TODO"]

# Regular expression of note tags to take in consideration.
# notes-rgx =
[tool.pylint.refactoring]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 5
# Complete name of functions that never returns. When checking for inconsistent-
# return-statements if a never returning function is called then it will be
# considered as an explicit return statement and no message will be printed.
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each category,
# as well as 'statement' which is the total number of statements analyzed. This
# score is used by the global evaluation report (RP0004).
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details.
# msg-template =
# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format = """\
  colorized,\
  text:docs/reports/pylint-report.txt\
"""
# Tells whether to display a full report or only the messages.
reports = "y"
# Activate the evaluation score.
score = true

[tool.pylint.similarities]
# Comments are removed from the similarity computation
ignore-comments = true
# Docstrings are removed from the similarity computation
ignore-docstrings = true
# Imports are removed from the similarity computation
ignore-imports = true
# Signatures are removed from the similarity computation
ignore-signatures = true
# Minimum lines number of a similarity.
min-similarity-lines = 4

[tool.pylint.spelling]
# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions = 4
# Spelling dictionary name. Available dictionaries: none. To make it work,
# install the 'python-enchant' package.
# spelling-dict =
# List of comma separated words that should be considered directives if they
# appear at the beginning of a comment and should not be checked.
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

# List of comma separated words that should not be checked.
# spelling-ignore-words =
# A path to a file that contains the private dictionary; one word per line.
# spelling-private-dict-file =
# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
# spelling-store-unknown-words =
[tool.pylint.string]

# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
# check-quote-consistency =
# This flag controls whether the implicit-str-concat should generate a warning on
# implicit string concatenation in sequences defined over several lines.
# check-str-concat-over-line-jumps =
[tool.pylint.typecheck]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators = ["contextlib.contextmanager"]
# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
# generated-members =
# Tells whether missing members accessed in mixin class should be ignored. A
# class is considered mixin if its name matches the mixin-class-rgx option.
# Tells whether to warn about missing members when the owner of the attribute is
# inferred to be None.
ignore-none = true
# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference can
# return multiple potential results while evaluating a Python object, but some
# branches might not be evaluated, which results in partial inference. In that
# case, it might be useful to still emit no-member and other checks for the rest
# of the inferred objects.
ignore-on-opaque-inference = true
# List of symbolic message names to ignore for Mixin members.
ignored-checks-for-mixins = [
  "no-member",
  "not-async-context-manager",
  "not-context-manager",
  "attribute-defined-outside-init",
]
# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes = [
  "optparse.Values",
  "thread._local",
  "_thread._local",
  "argparse.Namespace",
]
# Show a hint with possible names when a member name was not found. The aspect of
# finding the hint is based on edit distance.
missing-member-hint = true
# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance = 1
# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices = 1
# Regex pattern to define which classes are considered mixins.
mixin-class-rgx = ".*[Mm]ixin"

# List of decorators that change the signature of a decorated function.
# signature-mutators =
[tool.pylint.variables]
# List of additional names supposed to be defined in builtins. Remember that you
# should avoid defining new builtins when possible.
# additional-builtins =
# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables = true
# List of names allowed to shadow builtins
# allowed-redefined-builtins =
# List of strings which can identify a callback function by name. A callback name
# must start or end with one of those strings.
callbacks = ["cb_", "_cb"]
# A regular expression matching the name of dummy variables (i.e. expected to not
# be used).
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
# Argument names that match this expression will be ignored.
ignored-argument-names = "_.*|^ignored_|^unused_"
# Tells whether we should check for unused import in __init__ files.
init-import = false
# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules = [
  "six.moves",
  "past.builtins",
  "future.builtins",
  "builtins",
  "io",
]

[tool.pyright]
strict = ["src"]
typeCheckingMode = "strict"

[tool.pytest.ini_options]
# https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --doctest-modules --failed-first --strict-config --strict-markers --verbosity=2"
doctest_optionflags = "ELLIPSIS IGNORE_EXCEPTION_DETAIL"
filterwarnings = [
  "error",
  "ignore:The --looponfail command line argument and looponfailroots config variable are deprecated:DeprecationWarning",
  "ignore::DeprecationWarning:dateutil.tz.tz"
]
testpaths = ["src", "tests", "tools"]
xfail_strict = true

[tool.ruff]
extend-include = ["*.ipynb"]
fix = true
line-length = 100
show-fixes = true
show-source = true
src = ["src", "tests", "tools"]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.isort]
known-first-party = ["tests", "tools"]

[tool.ruff.lint]
select = [
  "B",
  "C90",
  "E1",
  "E4",
  "E7",
  "E9",
  "ERA",
  "D",
  "F",
  "G",
  "I",
  "N",
  "PL",
  "PT",
  "RET",
  "RUF",
  "S",
  "T20",
  "TID",
  "UP",
  "W"
]

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.mccabe]
max-complexity = 5

[tool.ruff.lint.pydocstyle]
convention = "google"
